# coding: utf-8

"""
    DataHub API

    DataHub API

    OpenAPI spec version: 0.0.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DataSet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, description=None, owner=None, open=None, related_data_sets=None, sample_release=None, sample_element=None, tags=None, price=None):
        """
        DataSet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'description': 'str',
            'owner': 'str',
            'open': 'bool',
            'related_data_sets': 'list[str]',
            'sample_release': 'str',
            'sample_element': 'str',
            'tags': 'list[str]',
            'price': 'PriceInfo'
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'owner': 'owner',
            'open': 'open',
            'related_data_sets': 'relatedDataSets',
            'sample_release': 'sampleRelease',
            'sample_element': 'sampleElement',
            'tags': 'tags',
            'price': 'price'
        }

        self._id = id
        self._description = description
        self._owner = owner
        self._open = open
        self._related_data_sets = related_data_sets
        self._sample_release = sample_release
        self._sample_element = sample_element
        self._tags = tags
        self._price = price

    @property
    def id(self):
        """
        Gets the id of this DataSet.
        A short name for this dataset

        :return: The id of this DataSet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DataSet.
        A short name for this dataset

        :param id: The id of this DataSet.
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """
        Gets the description of this DataSet.


        :return: The description of this DataSet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DataSet.


        :param description: The description of this DataSet.
        :type: str
        """

        self._description = description

    @property
    def owner(self):
        """
        Gets the owner of this DataSet.


        :return: The owner of this DataSet.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this DataSet.


        :param owner: The owner of this DataSet.
        :type: str
        """

        self._owner = owner

    @property
    def open(self):
        """
        Gets the open of this DataSet.


        :return: The open of this DataSet.
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """
        Sets the open of this DataSet.


        :param open: The open of this DataSet.
        :type: bool
        """

        self._open = open

    @property
    def related_data_sets(self):
        """
        Gets the related_data_sets of this DataSet.


        :return: The related_data_sets of this DataSet.
        :rtype: list[str]
        """
        return self._related_data_sets

    @related_data_sets.setter
    def related_data_sets(self, related_data_sets):
        """
        Sets the related_data_sets of this DataSet.


        :param related_data_sets: The related_data_sets of this DataSet.
        :type: list[str]
        """

        self._related_data_sets = related_data_sets

    @property
    def sample_release(self):
        """
        Gets the sample_release of this DataSet.
        The id of a release that contains a sample of this data set

        :return: The sample_release of this DataSet.
        :rtype: str
        """
        return self._sample_release

    @sample_release.setter
    def sample_release(self, sample_release):
        """
        Sets the sample_release of this DataSet.
        The id of a release that contains a sample of this data set

        :param sample_release: The sample_release of this DataSet.
        :type: str
        """

        self._sample_release = sample_release

    @property
    def sample_element(self):
        """
        Gets the sample_element of this DataSet.
        The id of an element in that release that contains the data for a sample

        :return: The sample_element of this DataSet.
        :rtype: str
        """
        return self._sample_element

    @sample_element.setter
    def sample_element(self, sample_element):
        """
        Sets the sample_element of this DataSet.
        The id of an element in that release that contains the data for a sample

        :param sample_element: The sample_element of this DataSet.
        :type: str
        """

        self._sample_element = sample_element

    @property
    def tags(self):
        """
        Gets the tags of this DataSet.
        Searchable terms for this data set

        :return: The tags of this DataSet.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this DataSet.
        Searchable terms for this data set

        :param tags: The tags of this DataSet.
        :type: list[str]
        """

        self._tags = tags

    @property
    def price(self):
        """
        Gets the price of this DataSet.


        :return: The price of this DataSet.
        :rtype: PriceInfo
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this DataSet.


        :param price: The price of this DataSet.
        :type: PriceInfo
        """

        self._price = price

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
