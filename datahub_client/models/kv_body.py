# coding: utf-8

"""
    DataHub API

    DataHub API

    OpenAPI spec version: 0.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class KVBody(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, field_names=None, field_types=None, value_data=None):
        """
        KVBody - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'field_names': 'str',
            'field_types': 'str',
            'value_data': 'str'
        }

        self.attribute_map = {
            'field_names': 'fieldNames',
            'field_types': 'fieldTypes',
            'value_data': 'valueData'
        }

        self._field_names = field_names
        self._field_types = field_types
        self._value_data = value_data

    @property
    def field_names(self):
        """
        Gets the field_names of this KVBody.


        :return: The field_names of this KVBody.
        :rtype: str
        """
        return self._field_names

    @field_names.setter
    def field_names(self, field_names):
        """
        Sets the field_names of this KVBody.


        :param field_names: The field_names of this KVBody.
        :type: str
        """

        self._field_names = field_names

    @property
    def field_types(self):
        """
        Gets the field_types of this KVBody.


        :return: The field_types of this KVBody.
        :rtype: str
        """
        return self._field_types

    @field_types.setter
    def field_types(self, field_types):
        """
        Sets the field_types of this KVBody.


        :param field_types: The field_types of this KVBody.
        :type: str
        """

        self._field_types = field_types

    @property
    def value_data(self):
        """
        Gets the value_data of this KVBody.


        :return: The value_data of this KVBody.
        :rtype: str
        """
        return self._value_data

    @value_data.setter
    def value_data(self, value_data):
        """
        Sets the value_data of this KVBody.


        :param value_data: The value_data of this KVBody.
        :type: str
        """

        self._value_data = value_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
