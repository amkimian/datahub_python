# coding: utf-8

"""
    DataHub API

    DataHub API

    OpenAPI spec version: 0.0.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DataSetRelease(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, dataset=None, owner=None, published=None, description=None):
        """
        DataSetRelease - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'dataset': 'str',
            'owner': 'str',
            'published': 'bool',
            'description': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'dataset': 'dataset',
            'owner': 'owner',
            'published': 'published',
            'description': 'description'
        }

        self._id = id
        self._dataset = dataset
        self._owner = owner
        self._published = published
        self._description = description

    @property
    def id(self):
        """
        Gets the id of this DataSetRelease.
        The id of this release

        :return: The id of this DataSetRelease.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DataSetRelease.
        The id of this release

        :param id: The id of this DataSetRelease.
        :type: str
        """

        self._id = id

    @property
    def dataset(self):
        """
        Gets the dataset of this DataSetRelease.
        The id of the data set this release relates to

        :return: The dataset of this DataSetRelease.
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """
        Sets the dataset of this DataSetRelease.
        The id of the data set this release relates to

        :param dataset: The dataset of this DataSetRelease.
        :type: str
        """

        self._dataset = dataset

    @property
    def owner(self):
        """
        Gets the owner of this DataSetRelease.
        The id of the user this data set/release relates to

        :return: The owner of this DataSetRelease.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this DataSetRelease.
        The id of the user this data set/release relates to

        :param owner: The owner of this DataSetRelease.
        :type: str
        """

        self._owner = owner

    @property
    def published(self):
        """
        Gets the published of this DataSetRelease.
        Whether this release is locked down and published (you cannot unpublish ideally)

        :return: The published of this DataSetRelease.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """
        Sets the published of this DataSetRelease.
        Whether this release is locked down and published (you cannot unpublish ideally)

        :param published: The published of this DataSetRelease.
        :type: bool
        """

        self._published = published

    @property
    def description(self):
        """
        Gets the description of this DataSetRelease.
        Some commentary on this release

        :return: The description of this DataSetRelease.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DataSetRelease.
        Some commentary on this release

        :param description: The description of this DataSetRelease.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
