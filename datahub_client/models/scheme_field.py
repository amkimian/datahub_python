# coding: utf-8

"""
    DataHub API

    DataHub API

    OpenAPI spec version: 0.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SchemeField(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, label=None, data_type=None, input=None, values=None, operators=None):
        """
        SchemeField - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'label': 'str',
            'data_type': 'str',
            'input': 'str',
            'values': 'list[SchemeValueType]',
            'operators': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'data_type': 'dataType',
            'input': 'input',
            'values': 'values',
            'operators': 'operators'
        }

        self._id = id
        self._label = label
        self._data_type = data_type
        self._input = input
        self._values = values
        self._operators = operators

    @property
    def id(self):
        """
        Gets the id of this SchemeField.
        The id of this field (the key in the document)

        :return: The id of this SchemeField.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SchemeField.
        The id of this field (the key in the document)

        :param id: The id of this SchemeField.
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """
        Gets the label of this SchemeField.
        A label that could be used in a UI

        :return: The label of this SchemeField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this SchemeField.
        A label that could be used in a UI

        :param label: The label of this SchemeField.
        :type: str
        """

        self._label = label

    @property
    def data_type(self):
        """
        Gets the data_type of this SchemeField.
        The type of this data (string, integer, double)

        :return: The data_type of this SchemeField.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """
        Sets the data_type of this SchemeField.
        The type of this data (string, integer, double)

        :param data_type: The data_type of this SchemeField.
        :type: str
        """

        self._data_type = data_type

    @property
    def input(self):
        """
        Gets the input of this SchemeField.
        Optional, the type of input control used

        :return: The input of this SchemeField.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """
        Sets the input of this SchemeField.
        Optional, the type of input control used

        :param input: The input of this SchemeField.
        :type: str
        """

        self._input = input

    @property
    def values(self):
        """
        Gets the values of this SchemeField.


        :return: The values of this SchemeField.
        :rtype: list[SchemeValueType]
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this SchemeField.


        :param values: The values of this SchemeField.
        :type: list[SchemeValueType]
        """

        self._values = values

    @property
    def operators(self):
        """
        Gets the operators of this SchemeField.
        The operators that could apply to this field

        :return: The operators of this SchemeField.
        :rtype: list[str]
        """
        return self._operators

    @operators.setter
    def operators(self, operators):
        """
        Sets the operators of this SchemeField.
        The operators that could apply to this field

        :param operators: The operators of this SchemeField.
        :type: list[str]
        """

        self._operators = operators

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
