# coding: utf-8

"""
    DataHub API

    DataHub API

    OpenAPI spec version: 0.0.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ElementApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_element(self, user_id, data_set, release, body, **kwargs):
        """
        Create a new open element
        This creates a new element in a release in a data set. The element defaults to the open (and therefore unpublished) state. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_element(user_id, data_set, release, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The id of the user that this dataset is associated with (required)
        :param str data_set: The id of the data set (required)
        :param str release: The id of the release this element belongs to (required)
        :param DataElement body: Element object that defines the element in a data set (required)
        :param str api_key: The user api key
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_element_with_http_info(user_id, data_set, release, body, **kwargs)
        else:
            (data) = self.add_element_with_http_info(user_id, data_set, release, body, **kwargs)
            return data

    def add_element_with_http_info(self, user_id, data_set, release, body, **kwargs):
        """
        Create a new open element
        This creates a new element in a release in a data set. The element defaults to the open (and therefore unpublished) state. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_element_with_http_info(user_id, data_set, release, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The id of the user that this dataset is associated with (required)
        :param str data_set: The id of the data set (required)
        :param str release: The id of the release this element belongs to (required)
        :param DataElement body: Element object that defines the element in a data set (required)
        :param str api_key: The user api key
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'data_set', 'release', 'body', 'api_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `add_element`")
        # verify the required parameter 'data_set' is set
        if ('data_set' not in params) or (params['data_set'] is None):
            raise ValueError("Missing the required parameter `data_set` when calling `add_element`")
        # verify the required parameter 'release' is set
        if ('release' not in params) or (params['release'] is None):
            raise ValueError("Missing the required parameter `release` when calling `add_element`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_element`")

        resource_path = '/elements/{userId}/{dataSet}/{release}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'data_set' in params:
            path_params['dataSet'] = params['data_set']
        if 'release' in params:
            path_params['release'] = params['release']

        query_params = {}

        header_params = {}
        if 'api_key' in params:
            header_params['api_key'] = params['api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_element(self, user_id, data_set, release, element, **kwargs):
        """
        Delete element information
        This removes an element 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_element(user_id, data_set, release, element, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The id of the user that this dataset is associated with (required)
        :param str data_set: The id of the data set (required)
        :param str release: The id of the release (required)
        :param str element: The id of the element (required)
        :param str api_key: The user api key
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_element_with_http_info(user_id, data_set, release, element, **kwargs)
        else:
            (data) = self.delete_element_with_http_info(user_id, data_set, release, element, **kwargs)
            return data

    def delete_element_with_http_info(self, user_id, data_set, release, element, **kwargs):
        """
        Delete element information
        This removes an element 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_element_with_http_info(user_id, data_set, release, element, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The id of the user that this dataset is associated with (required)
        :param str data_set: The id of the data set (required)
        :param str release: The id of the release (required)
        :param str element: The id of the element (required)
        :param str api_key: The user api key
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'data_set', 'release', 'element', 'api_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_element`")
        # verify the required parameter 'data_set' is set
        if ('data_set' not in params) or (params['data_set'] is None):
            raise ValueError("Missing the required parameter `data_set` when calling `delete_element`")
        # verify the required parameter 'release' is set
        if ('release' not in params) or (params['release'] is None):
            raise ValueError("Missing the required parameter `release` when calling `delete_element`")
        # verify the required parameter 'element' is set
        if ('element' not in params) or (params['element'] is None):
            raise ValueError("Missing the required parameter `element` when calling `delete_element`")

        resource_path = '/elements/{userId}/{dataSet}/{release}/{element}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'data_set' in params:
            path_params['dataSet'] = params['data_set']
        if 'release' in params:
            path_params['release'] = params['release']
        if 'element' in params:
            path_params['element'] = params['element']

        query_params = {}

        header_params = {}
        if 'api_key' in params:
            header_params['api_key'] = params['api_key']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_element(self, user_id, data_set, release, element, **kwargs):
        """
        Get element information
        This returns information about an element 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_element(user_id, data_set, release, element, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The id of the user that this dataset is associated with (required)
        :param str data_set: The id of the data set (required)
        :param str release: The id of the release (required)
        :param str element: The id of the element (required)
        :param str api_key: The user api key
        :return: DataElement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_element_with_http_info(user_id, data_set, release, element, **kwargs)
        else:
            (data) = self.get_element_with_http_info(user_id, data_set, release, element, **kwargs)
            return data

    def get_element_with_http_info(self, user_id, data_set, release, element, **kwargs):
        """
        Get element information
        This returns information about an element 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_element_with_http_info(user_id, data_set, release, element, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The id of the user that this dataset is associated with (required)
        :param str data_set: The id of the data set (required)
        :param str release: The id of the release (required)
        :param str element: The id of the element (required)
        :param str api_key: The user api key
        :return: DataElement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'data_set', 'release', 'element', 'api_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_element`")
        # verify the required parameter 'data_set' is set
        if ('data_set' not in params) or (params['data_set'] is None):
            raise ValueError("Missing the required parameter `data_set` when calling `get_element`")
        # verify the required parameter 'release' is set
        if ('release' not in params) or (params['release'] is None):
            raise ValueError("Missing the required parameter `release` when calling `get_element`")
        # verify the required parameter 'element' is set
        if ('element' not in params) or (params['element'] is None):
            raise ValueError("Missing the required parameter `element` when calling `get_element`")

        resource_path = '/elements/{userId}/{dataSet}/{release}/{element}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'data_set' in params:
            path_params['dataSet'] = params['data_set']
        if 'release' in params:
            path_params['release'] = params['release']
        if 'element' in params:
            path_params['element'] = params['element']

        query_params = {}

        header_params = {}
        if 'api_key' in params:
            header_params['api_key'] = params['api_key']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataElement',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_element(self, user_id, data_set, release, element, body, **kwargs):
        """
        Updates an element
        Updates an element

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_element(user_id, data_set, release, element, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The id of the user that this dataset is associated with (required)
        :param str data_set: The id of the data set (required)
        :param str release: The id of the release (required)
        :param str element: The id of the element (required)
        :param DataElement body: The updated element (required)
        :param str api_key: The user api key
        :return: DataElement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_element_with_http_info(user_id, data_set, release, element, body, **kwargs)
        else:
            (data) = self.update_element_with_http_info(user_id, data_set, release, element, body, **kwargs)
            return data

    def update_element_with_http_info(self, user_id, data_set, release, element, body, **kwargs):
        """
        Updates an element
        Updates an element

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_element_with_http_info(user_id, data_set, release, element, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The id of the user that this dataset is associated with (required)
        :param str data_set: The id of the data set (required)
        :param str release: The id of the release (required)
        :param str element: The id of the element (required)
        :param DataElement body: The updated element (required)
        :param str api_key: The user api key
        :return: DataElement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'data_set', 'release', 'element', 'body', 'api_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_element`")
        # verify the required parameter 'data_set' is set
        if ('data_set' not in params) or (params['data_set'] is None):
            raise ValueError("Missing the required parameter `data_set` when calling `update_element`")
        # verify the required parameter 'release' is set
        if ('release' not in params) or (params['release'] is None):
            raise ValueError("Missing the required parameter `release` when calling `update_element`")
        # verify the required parameter 'element' is set
        if ('element' not in params) or (params['element'] is None):
            raise ValueError("Missing the required parameter `element` when calling `update_element`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_element`")

        resource_path = '/elements/{userId}/{dataSet}/{release}/{element}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'data_set' in params:
            path_params['dataSet'] = params['data_set']
        if 'release' in params:
            path_params['release'] = params['release']
        if 'element' in params:
            path_params['element'] = params['element']

        query_params = {}

        header_params = {}
        if 'api_key' in params:
            header_params['api_key'] = params['api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataElement',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
