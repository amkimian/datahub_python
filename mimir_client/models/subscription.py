# coding: utf-8

"""
    Mimir DataHub API

    Mimir DataHub API

    OpenAPI spec version: 0.0.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Subscription(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user=None, owner=None, dataset=None, start_date=None, end_date=None, active=None, price=None):
        """
        Subscription - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user': 'str',
            'owner': 'str',
            'dataset': 'str',
            'start_date': 'date',
            'end_date': 'date',
            'active': 'bool',
            'price': 'PriceInfo'
        }

        self.attribute_map = {
            'user': 'user',
            'owner': 'owner',
            'dataset': 'dataset',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'active': 'active',
            'price': 'price'
        }

        self._user = user
        self._owner = owner
        self._dataset = dataset
        self._start_date = start_date
        self._end_date = end_date
        self._active = active
        self._price = price

    @property
    def user(self):
        """
        Gets the user of this Subscription.
        The user id who is subscribed

        :return: The user of this Subscription.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this Subscription.
        The user id who is subscribed

        :param user: The user of this Subscription.
        :type: str
        """

        self._user = user

    @property
    def owner(self):
        """
        Gets the owner of this Subscription.
        The owner of the dataset that is subscribed

        :return: The owner of this Subscription.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this Subscription.
        The owner of the dataset that is subscribed

        :param owner: The owner of this Subscription.
        :type: str
        """

        self._owner = owner

    @property
    def dataset(self):
        """
        Gets the dataset of this Subscription.
        The data set id that is subscribed

        :return: The dataset of this Subscription.
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """
        Sets the dataset of this Subscription.
        The data set id that is subscribed

        :param dataset: The dataset of this Subscription.
        :type: str
        """

        self._dataset = dataset

    @property
    def start_date(self):
        """
        Gets the start_date of this Subscription.
        When this subscription started

        :return: The start_date of this Subscription.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this Subscription.
        When this subscription started

        :param start_date: The start_date of this Subscription.
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this Subscription.
        When this subscription ends

        :return: The end_date of this Subscription.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this Subscription.
        When this subscription ends

        :param end_date: The end_date of this Subscription.
        :type: date
        """

        self._end_date = end_date

    @property
    def active(self):
        """
        Gets the active of this Subscription.
        Whether this subscription is active or not

        :return: The active of this Subscription.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this Subscription.
        Whether this subscription is active or not

        :param active: The active of this Subscription.
        :type: bool
        """

        self._active = active

    @property
    def price(self):
        """
        Gets the price of this Subscription.


        :return: The price of this Subscription.
        :rtype: PriceInfo
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this Subscription.


        :param price: The price of this Subscription.
        :type: PriceInfo
        """

        self._price = price

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
